// use let or var or const to declare a variable
/*
string
    let name = 'John';
    let name = "John Doe";
    print to console
        console.log('Hello World');
        console.log(typeof address);

number
    let age = 30;
    let age = 30.5;
    let age = -30;
    console.log(typeof age);

boolean
    let isMarried = true;
    let isMarried = false;
    console.log(isMarried);
    console.log(typeof isMarried);

null
    let car = null;
    console.log(car);
    console.log(typeof car);
    // null represents an empty value of an object

undefined
    let test;
    same as, let test = undefined;
    console.log(test);
    console.log(typeof test);
    // undefined represents an uninitialized value

symbol
    let sym = Symbol();
    console.log(sym);
    console.log(typeof sym);

object
    let address = {
        city: 'Jakarta',
        country: 'Indonesia',
        fav: ['music', 10, true]    
    };
    console.log(address);
    console.log(typeof address);
    // object is a non-primitive data type that represents a collection of key-value pairs

array
    let hobbies = ['music', 'movie', 'reading'];
    console.log(hobbies);
    console.log(typeof hobbies); // prints object
    let salad = ['a', 'apple', 10, true]; //prints object
    array is a subtype of object

function
    let greet = function() {
        return 'Hello';
    }
    console.log(greet);
    console.log(typeof greet);

*/

// hoisting
/*
    console.log(name);
    var name = 'John';
    // prints undefined
    // hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution
    // only variable declarations are hoisted, not the initializations
    // let and const are not hoisted, only var is hoisted.
    so dont use var anymore, use let or const , only use var if you have to use it.

    const should be initialized when declared, and cannot reassign a value to a constant variable.

    when we use functions , it also hoisted,
    greet();
    function greet() {
        console.log('Hello');
    }
        auto declaretion go to the top of the code.

function print() {
	var x = 10;
  console.log(x);
  if (true) {
  	var x = 20;
    console.log(x);
  }
  console.log(x);
}
print();
prints 10, 20, 20

function print() {  
    let x = 10;
    console.log(x);
    if (true) {
        let x = 20;
        console.log(x);
    }
    console.log(x);
}
print();
prints 10, 20, 10

var is function scoped, let and const are block scoped.


// operatoes
//arithmetic 

let x = 10;
let y = 3;
console.log(x + y); // 13
console.log(x - y); // 7
console.log(x * y); // 30
console.log(x / y); // 3.3333333333333335
console.log(x % y); // 1
console.log(x ** y); // 1000
increment (++)
console.log(x++); // 10
console.log(x); // 11
console.log(++x); // 12
decrement (--)
console.log(x--); // 12
console.log(x); // 11
console.log(--x); // 10

// assignment
let x = 10;
x = x + 5;
x += 5;
x -= 5;
x *= 5;
x /= 5;
x %= 5;

// comparison
let x = 1;
// relational
console.log(x > 0); // true
console.log(x >= 1); // true
console.log(x < 1); // false
console.log(x <= 1); // true
// equality
console.log(x === 1); // true
console.log(x !== 1); // false
// strict equality (type + value)
console.log(1 === 1); // true
console.log('1' === 1); // false
// lose equality (value)
console.log(1 == 1); // true
console.log('1' == 1); // true
console.log(true == 1); // true

// ternary
let points = 110;
let type = points > 100 ? 'gold' : 'silver';
console.log(type); // gold

// logical
// logical AND (&&)
console.log(true && true); // true
console.log(true && false); // false
// logical OR (||)
console.log(true || true); // true
console.log(true || false); // true
// logical NOT (!)
console.log(!true); // false
console.log(!false); // true

// bitwise
// 1 = 00000001
// 2 = 00000010
// 3 = 00000011
// R = 00000000
console.log(1 | 2); // 3
console.log(1 & 2); // 0

// typeof
let name = 'John';
console.log(typeof name); // string
let age = 30;
console.log(typeof age); // number
let isMarried = true;
console.log(typeof isMarried); // boolean
let car = null;
console.log(typeof car); // object
let test;
console.log(typeof test); // undefined
let sym = Symbol();

*/

//control flow

/*
conditional

if-else

let hour = 10;
if (hour >= 6 && hour < 12) {
    console.log('Good Morning');
} else if (hour >= 12 && hour < 18) {
    console.log('Good Afternoon');
} else {
    console.log('Good Evening');
}
prints Good Morning

switch-case

let role = 'guest';
switch (role) {
    case 'guest':
        console.log('Guest User');
        break;
    case 'moderator':
        console.log('Moderator User');
        break;
    default:
        console.log('Unknown User');
}
prints Guest User

loops

for

for (let i = 0; i < 5; i++) {
    console.log('Hello');
}
prints Hello 5 times

while

let i = 0;
while (i < 5) {
    console.log('Hello');
    i++;
}
prints Hello 5 times

do-while

let i = 0;
do {
    console.log('Hello');
    i++;
}
while (i < 5);
prints Hello 5 times

for-in

const person = {
    name: 'John',
    age: 30
};
for (let key in person) {
    console.log(key, person[key]);
}
prints name John age 30

for-of

const colors = ['red', 'green', 'blue'];
for (let color of colors) {
    console.log(color);
}
prints red green blue

break and continue

let i = 0;
while (i <= 10) {
    if (i === 5) break;
    if (i % 2 === 0) {
        i++;
        continue;
    }
    console.log(i);
    i++;
}
prints 1 3

*/

//fuctions

/*
function greet(name) {
    console.log('Hello ' + name);
}
greet('John');
prints Hello John

function square(number) {
    return number * number;
}
console.log(square(2));
prints 4

function greet(name, lastName) {
    console.log('Hello ' + name + ' ' + lastName);
}
greet('John', 'Doe');
prints Hello John Doe

function greet(name, lastName) {
    console.log('Hello ' + name + ' ' + lastName);
}
greet('John');
prints Hello John undefined

function greet(name, lastName) {
    console.log('Hello ' + name + ' ' + lastName);
}
greet('John', 'Doe', 'Smith');
prints Hello John Doe

function expressions
// expression based annonymous function

const greet = function(name) {
    console.log('Hello ' + name);
};
greet('John');
prints Hello John

let greet = function(name) { 
    console.log('Hello ' + name);
}
greet('John');
prints Hello John

// expression based arrow function

const greet = (name) => {
    console.log('Hello ' + name);
}
greet('John');
prints Hello John

const square = number => number * number;
console.log(square(2));
prints 4

const jobs = [
    { id: 1, isActive: true },
    { id: 2, isActive: true },
    { id: 3, isActive: false }
];
const activeJobs = jobs.filter(job => job.isActive);
console.log(activeJobs);
prints [ { id: 1, isActive: true }, { id: 2, isActive: true } ]

anonymous functions

document.addEventListener('click', function() {
    console.log('Document Clicked');
}
prints Document Clicked

default parameters

function interest(principal, rate = 3.5, years = 5) {
    return principal * rate / 100 * years;
}
console.log(interest(10000));
prints 1750 
function sum (num1 =10, num2 = 20) {
    return num1 + num2;
}
console.log(sum(5));
prints 25
console.log(sum());
prints 30
console.log(sum(5, 5));
prints 10

rest operator

function sum(discount, ...prices) {
    const total = prices.reduce((a, b) => a + b);
    return total * (1 - discount);
}
console.log(sum(0.1, 20, 30));
prints 45

spread operator

const first = [1, 2, 3];
const second = [4, 5, 6];
const combined = [...first, ...second];
console.log(combined);
prints [ 1, 2, 3, 4, 5, 6 ]

const first = { name: 'John' };
const second = { job: 'Developer' };
const combined = { ...first, ...second, location: 'Australia' };
console.log(combined);
prints { name: 'John', job: 'Developer', location: 'Australia' }




*/

//arrays

/*
const numbers = [3, 4];
// end
numbers.push(5, 6);
console.log(numbers);
prints [ 3, 4, 5, 6 ]
// beginning
numbers.unshift(1, 2);
console.log(numbers);
prints [ 1, 2, 3, 4, 5, 6 ]
// middle
numbers.splice(2, 0, 'a', 'b');
console.log(numbers);
prints [ 1, 2, 'a', 'b', 3, 4, 5, 6 ]
// end
const last = numbers.pop();
console.log(numbers);
console.log(last);
prints [ 1, 2, 'a', 'b', 3, 4, 5 ] 6
// beginning
const first = numbers.shift();
console.log(numbers);
console.log(first);
prints [ 2, 'a', 'b', 3, 4, 5 ] 1
// middle
numbers.splice(2, 1);
console.log(numbers);
prints [ 2, 'a', 3, 4, 5 ]
// find
const numbers = [1, 2, 3, 1, 4];
console.log(numbers.indexOf(1));
prints 0
console.log(numbers.lastIndexOf(1));
prints 3
console.log(numbers.indexOf(1, 2));
prints 3
console.log(numbers.indexOf(1, 0));
prints 0
console.log(numbers.indexOf(1, 1));
prints 3
console.log(numbers.indexOf(0));
prints -1
console.log(numbers.includes(1));
prints true
console.log(numbers.includes(0));
prints false
// find
const courses = [
    { id: 1, name: 'a' },
    { id: 2, name: 'b' }
];
const course = courses.find(function(course) {
    return course.name === 'a';
});
console.log(course);
prints { id: 1, name: 'a' }
// arrow function
const course = courses.find(course => course.name === 'a');
console.log(course);
prints { id: 1, name: 'a' }
// remove
const numbers = [1, 2, 3, 4];
const last = numbers.pop();
console.log(numbers);
console.log(last);
prints [ 1, 2, 3 ] 4
// remove
const numbers = [1, 2, 3, 4];
const first = numbers.shift();
console.log(numbers);
console.log(first);
prints [ 2, 3, 4 ] 1
// remove
const numbers = [1, 2, 3, 4];
numbers.splice(2, 1);
console.log(numbers);
prints [ 1, 2, 4 ]
// empty
let numbers = [1, 2, 3, 4];
let another = numbers;
numbers = [];
console.log(numbers);
console.log(another);
prints [] [ 1, 2, 3, 4 ]
// empty
let numbers = [1, 2, 3, 4];
let another = numbers;
numbers.length = 0;
console.log(numbers);
console.log(another);

prints [] []
// empty
let numbers = [1, 2, 3, 4];
let another = numbers;
numbers.splice(0, numbers.length);
console.log(numbers);
console.log(another);
prints [] []
// combine
const first = [1, 2, 3];
const second = [4, 5, 6];
const combined = first.concat(second);
console.log(combined);
prints [ 1, 2, 3, 4, 5, 6 ]
// slice
const numbers = [1, 2, 3, 4];
const copy = numbers.slice();
console.log(copy);
prints [ 1, 2, 3, 4 ]
// slice
const numbers = [1, 2, 3, 4];
const copy = numbers.slice(2);
console.log(copy);
prints [ 3, 4 ]
// slice
const numbers = [1, 2, 3, 4];
const copy = numbers.slice(1, 3);
console.log(copy);
prints [ 2, 3 ]
// spread
const first = [1, 2, 3];
const second = [4, 5, 6];
const combined = [...first, ...second];
console.log(combined);
prints [ 1, 2, 3, 4, 5, 6 ]
// spread
const first = { name: 'John' };
const second = { job: 'Developer' };
const combined = { ...first, ...second, location: 'Australia' };
console.log(combined);
prints { name: 'John', job: 'Developer', location: 'Australia' }
// iterate
const numbers = [1, 2, 3];
for (let number of numbers)
    console.log(number);
prints 1 2 3

console.table(numbers);
prints table of numbers

//pop remove last element
//shift remove first element
//splice remove element at index
aruments of shift, start index, number of elements to remove
start index is requied while no.of elements optional

foreach
const numbers = [1, 2, 3];
numbers.forEach((number, index) => console.log(index, number));
prints 0 1 1 2 2 3

map
const numbers = [1, 2, 3];
const items = numbers.map(number => '<li>' + number + '</li>');
console.log(items);
prints [ '<li>1</li>', '<li>2</li>', '<li>3</li>' ]

filter
const numbers = [1, -1, 2, 3];
const filtered = numbers.filter(number => number >= 0);
console.log(filtered);
prints [ 1, 2, 3 ]

find
const numbers = [1, -1, 2, 3];
const found = numbers.find(number => number >= 0);
console.log(found);
prints 1

sort
const numbers = [2, 3, 1];
numbers.sort();
console.log(numbers);
prints [ 1, 2, 3 ]
numbers.reverse();
console.log(numbers);
prints [ 3, 2, 1 ]

every
const numbers = [2, 3, 1];
const allPositive = numbers.every(number => number >= 0);
console.log(allPositive);
prints true

some
const numbers = [2, -1, 1];
const atLeastOnePositive = numbers.some(number => number >= 0);
console.log(atLeastOnePositive);
prints true

reduce
const numbers = [1, -1, 2, 3];
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue);
console.log(sum);
prints 5



*/

//oop

/*
littral syntax, class syntax, constructor function syntax

littral syntax

let man = {
    name: 'John',
    age: 30,
    greet: function() {
        console.log('Hello');
    },
    friend  : {
        name: 'Smith',
        age: 30
    }
}
console.log(man);
prints all the properties
console.log(man.name);
prints John

class syntax

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    greet() {
        console.log('Hello');
    }       
}
const person = new Person('John', 30);
console.log(person);
prints { name: 'John', age: 30 }
console.log(person.name);
prints John

constructor function syntax

function Person(name, age) {
    this.name = name;
    this.age = age;
    this.greet = function() {
        console.log('Hello');
    }
}
const person = new Person('John', 30);
console.log(person);
prints { name: 'John', age: 30 }
console.log(person.name);
prints John

prototypes



*/